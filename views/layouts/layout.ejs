<!DOCTYPE html>
<html>

<head>
  <title>New Sails App</title>

  <script src="/js/jquery.js"></script>

  <script>
    let server = location.origin;
    let serverApi = location.origin + '/api';
    let api = {
      getWorkerData: serverApi + '/worker/collect',
      getMinerPayout: serverApi + '/miner/{{minerAddress}}/collectPayout',
      updateWorker: serverApi + '/worker/{{workerId}}/update'
    };

    let page = {
      viewWorkerDetail: server + '/miner/{{minerAddress}}/worker/{{workerName}}'
    };

    // toastr.options = {
    //   "closeButton": true,
    //   "debug": true,
    //   "newestOnTop": true,
    //   "progressBar": true,
    //   "positionClass": "toast-top-right",
    //   "preventDuplicates": false,
    //   "showDuration": "300",
    //   "hideDuration": "1000",
    //   "timeOut": 0,
    //   "extendedTimeOut": 0,
    //   "showEasing": "swing",
    //   "hideEasing": "linear",
    //   "showMethod": "fadeIn",
    //   "hideMethod": "fadeOut",
    //   "tapToDismiss": false
    // }

  </script>
  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.min.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.min.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap-grid.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap-grid.min.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap-reboot.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap-reboot.min.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/importer.css">
  <link rel="stylesheet" href="/styles/New Sails App_files/toastr.css">
  <link rel="stylesheet" href="/styles/toastr.css">
  <!--STYLES END-->
</head>

<body>
  <!-- <div id="outdatedWarning" style="display: none" class="alert alert-warning floatTop">
    <strong>Warning! Data is out dated</strong> You should
    <a href="javascript:void(0)" onClick="window.location.reload()" class="alert-link">reload</a>.
  </div> -->

  <ul class="nav justify-content-center">
    <li class="nav-item">
      <a class="nav-link active" href="#">Dashboard</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" href="#">Settings</a>
    </li>
  </ul>

  <div id="appBody" class="container-fluid">
    <%- body %>
  </div>



  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <script src="/js/jquery.js"></script>
  <script src="/js/bootstrap/bootstrap.bundle.js"></script>
  <script src="/js/bootstrap/bootstrap.bundle.min.js"></script>
  <script src="/js/bootstrap/bootstrap.js"></script>
  <script src="/js/bootstrap/bootstrap.min.js"></script>
  <script src="/js/common.js"></script>
  <script src="/js/datatable/jquery.dataTables.min.js"></script>
  <script src="/js/toastr.js"></script>
  <!--SCRIPTS END-->
</body>

</html>